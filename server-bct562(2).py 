#Brandon Torio 
#bct562
#networks Project 1

#todo: print last modified since and find the error code for it 

from socket import *
import time
import os.path
import sys
import datetime

serverName = 'localhost'
serverPort = int(sys.argv[1]) #this needs to not be hardcoded 

serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.bind(('', serverPort))
serverSocket.listen(1)
#print ('created a socket')
#error codes we might need to send: 
	#404 not found
	#304 not modified 
	#505 HTTP version not supported 
	#400 bad request (junk case)
	#415 unsupported media type 
	#501 method not implemented 

def parse_message(input):
	#here we will check the contents of the message for correctness
	# print(input)
	words = input.split()
	# print (words)
	errorMessage = "200 OK"
	currTime = time.gmtime()
	# lastModified = " " 
	currTimeString = time.strftime('%a, %d %b %Y %H:%M:%S %Z', currTime)
	filename = words[1]
	contentType = "text/html"
	contentLength = 0
	errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type:" + contentType + ";charset=utf8\r\n\r\n"
	#errorResponse = "HTTP/1.1 " + errorMessage + "\r\n\r\n"

	firstLine = input.split("\r\n")
	lengthCheck = firstLine[0].split() #this is to check for the junk case
	
	

	if words[0] != "GET":
		errorMessage = "501 Method not implemented"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:" + currTimeString + "\r\nServer:Brandon/1.3.0\r\n\r\n501 Method not implemented"
		return errorResponse.encode()
	if words[2] != "HTTP/1.1":
		# print("checking for HTTP Version")
		errorMessage = "505 HTTP Version Not Supported"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\n\r\n505 HTTP Version Not Supported"
		return errorResponse.encode()

	if ".txt" in filename is False or ".jpg" in filename is False or ".jpeg" in filename is False or ".htm" in filename is False or ".html" in filename is False:
		print("detect wrong type")
		errorMessage = "415 unsupported file type"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0" + "\r\n\r\n415 unsupported file type"
		return errorResponse.encode()

	if os.path.isfile(filename.replace("/","")) is False:
		# print("in file not found")
		errorMessage = "404 File Not Found"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\n\r\n404 File Not Found"
		return errorResponse.encode()
	else:
		#print("the file was found")
		if ".txt" in filename: 
			# print("its a .txt file, named" + filename)
			contentLength = str(os.path.getsize(filename.replace("/","")))
			errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type:" + contentType + "\r\nContent-length: " + contentLength + "\r\n\r\n"
			f = open(filename.replace("/",""), 'r')
		elif ".jpg" in filename:
			# print("its a .jpg")
			contentType = "image/jpeg"
			contentLength = str(os.path.getsize(filename.replace("/","")))
			errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type:" + contentType + "\r\nContent-length: " + contentLength + "\r\n\r\n"
			f = open(filename.replace("/",""), 'rb')
			errorResponse2 = errorResponse.encode()
			image = f.read(8192)
			finalHeader = errorResponse2 + image
			return finalHeader
		elif ".jpeg" in filename:
			contentType = "image/jpeg"
			contentLength = str(os.path.getsize(filename.replace("/","")))
			errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type: " + contentType + "\r\nContent-length: " + contentLength + "\r\n\r\n"
			f = open(filename.replace("/",""), 'rb')
			errorResponse2 = errorResponse.encode()
			image = f.read(8192)
			finalHeader = errorResponse2 + image
			return finalHeader
		elif ".htm" in filename:
			f = open(filename.replace("/",""), 'r')
		elif ".html" in filename:
			f = open(filename.replace("/",""), 'r')
		else:
			errorMessage = "415 unsupported file type"
			errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type:text/html;charset=utf8\r\n\r\n"
			return errorResponse.encode()
		# print("are we getting here")
		for line in f:
			errorResponse = errorResponse + line + "\n"
		return errorResponse.encode()

	if len(lengthCheck) > 3:
		errorMessage = "400 Bad Request"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\n\r\n"
		return errorResponse.encode()

	if words[3] != "Host:":
		errormessage = "Bad request"
		errorResponse = "HTTP/1.1 " + errorMessage + "\r\nDate:"  + currTimeString + "\r\nServer:Brandon/1.3.0\r\nContent-type:text/html;charset=utf8\r\n\r\n"
		return errorResponse.encode()
	
	# print(words)
	return errorResponse.encode()

while 1:
	connectionSocket, addr = serverSocket.accept()
	sentence = connectionSocket.recv(2048)
	txtSentence = sentence.decode()

	#call function to evaluate the sentence?
	response = parse_message(txtSentence)

	#print('This came from the client:' + txtSentence)
	connectionSocket.send(response)
	connectionSocket.close()

